// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Editor Editing Mode matches the snapshot 1`] = `
<defaultProps(withStateHandlers(PureEditor))
  filename="test.js"
  isEditingInitially={true}
  isEditingPermitted={true}
  reservedHeaderHeight={0}
  value="This is the test content"
>
  <withStateHandlers(PureEditor)
    filename="test.js"
    isEditingInitially={true}
    isEditingPermitted={true}
    reservedHeaderHeight={0}
    value="This is the test content"
  >
    <PureEditor
      closeRevertChangesModal={[Function]}
      cursorPosition={
        Object {
          "column": 0,
          "row": 0,
        }
      }
      cursorPositionWasSet={true}
      filename="test.js"
      isEditing={true}
      isEditingInitially={true}
      isEditingPermitted={true}
      keepCursorAt={[Function]}
      onChangeValueUpdater={[Function]}
      openRevertChangesModal={[Function]}
      reservedHeaderHeight={0}
      resetValue={[Function]}
      revertChangesModalIsOpen={false}
      setInitialCursorPosition={[Function]}
      toggleEditingMode={[Function]}
      value=""
    >
      <div>
        <ButtonGroup
          attached="top"
        >
          <div
            className="ui top attached buttons"
          >
            <Button
              as="button"
              color="green"
              content="Editing Mode"
              icon="edit"
              onClick={[Function]}
            >
              <button
                className="ui green button"
                onClick={[Function]}
                role="button"
              >
                <Icon
                  as="i"
                  key="edit"
                  name="edit"
                >
                  <i
                    aria-hidden="true"
                    className="edit icon"
                  />
                </Icon>
                Editing Mode
              </button>
            </Button>
            <Modal
              basic={true}
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              open={false}
              size="small"
              trigger={
                <Button
                  as="button"
                  color="red"
                  content="Discard Changes"
                  data-testid="reset-button"
                  icon="trash outline"
                  onClick={[Function]}
                />
              }
            >
              <Portal
                className="ui page modals dimmer transition visible active"
                closeOnDocumentClick={false}
                closeOnEscape={true}
                closeOnRootNodeClick={true}
                eventPool="Modal"
                mountNode={<body />}
                onClose={[Function]}
                onMount={[Function]}
                onOpen={[Function]}
                onUnmount={[Function]}
                open={false}
                openOnTriggerClick={true}
                trigger={
                  <Button
                    as="button"
                    color="red"
                    content="Discard Changes"
                    data-testid="reset-button"
                    icon="trash outline"
                    onClick={[Function]}
                  />
                }
              >
                <Ref
                  innerRef={[Function]}
                >
                  <Button
                    as="button"
                    color="red"
                    content="Discard Changes"
                    data-testid="reset-button"
                    icon="trash outline"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <button
                      className="ui red button"
                      data-testid="reset-button"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      role="button"
                    >
                      <Icon
                        as="i"
                        key="trash outline"
                        name="trash outline"
                      >
                        <i
                          aria-hidden="true"
                          className="trash outline icon"
                        />
                      </Icon>
                      Discard Changes
                    </button>
                  </Button>
                </Ref>
              </Portal>
            </Modal>
          </div>
        </ButtonGroup>
        <ReactAce
          cursorStart={1}
          debounceChangePeriod={100}
          editorProps={
            Object {
              "$blockScrolling": true,
            }
          }
          enableBasicAutocompletion={false}
          enableLiveAutocompletion={false}
          focus={false}
          fontSize={12}
          height="calc(100vh - 36px - 0px)"
          highlightActiveLine={true}
          isEditingInitially={true}
          maxLines={null}
          minLines={null}
          mode=""
          name="editor-test.js"
          onChange={[Function]}
          onLoad={null}
          onPaste={null}
          onScroll={null}
          readOnly={false}
          scrollMargin={
            Array [
              0,
              0,
              0,
              0,
            ]
          }
          setOptions={
            Object {
              "cursorStyle": "smooth",
            }
          }
          showGutter={true}
          showPrintMargin={true}
          style={Object {}}
          tabSize={2}
          theme="github"
          value=""
          width="100%"
          wrapEnabled={false}
        >
          <div
            id="editor-test.js"
            style={
              Object {
                "height": "calc(100vh - 36px - 0px)",
                "width": "100%",
              }
            }
          />
        </ReactAce>
      </div>
    </PureEditor>
  </withStateHandlers(PureEditor)>
</defaultProps(withStateHandlers(PureEditor))>
`;

exports[`Editor Editing Mode matches the snapshot after clicking the toggle 1`] = `
<defaultProps(withStateHandlers(PureEditor))
  filename="test.js"
  isEditingInitially={true}
  isEditingPermitted={true}
  reservedHeaderHeight={0}
  value="This is the test content"
>
  <withStateHandlers(PureEditor)
    filename="test.js"
    isEditingInitially={true}
    isEditingPermitted={true}
    reservedHeaderHeight={0}
    value="This is the test content"
  >
    <PureEditor
      closeRevertChangesModal={[Function]}
      cursorPosition={
        Object {
          "column": 0,
          "row": 0,
        }
      }
      cursorPositionWasSet={true}
      filename="test.js"
      isEditing={false}
      isEditingInitially={true}
      isEditingPermitted={true}
      keepCursorAt={[Function]}
      onChangeValueUpdater={[Function]}
      openRevertChangesModal={[Function]}
      reservedHeaderHeight={0}
      resetValue={[Function]}
      revertChangesModalIsOpen={false}
      setInitialCursorPosition={[Function]}
      toggleEditingMode={[Function]}
      value=""
    >
      <div>
        <ButtonGroup
          attached="top"
        >
          <div
            className="ui top attached buttons"
          >
            <Button
              as="button"
              color="blue"
              content="Reading Mode"
              icon="eye"
              onClick={[Function]}
            >
              <button
                className="ui blue button"
                onClick={[Function]}
                role="button"
              >
                <Icon
                  as="i"
                  key="eye"
                  name="eye"
                >
                  <i
                    aria-hidden="true"
                    className="eye icon"
                  />
                </Icon>
                Reading Mode
              </button>
            </Button>
          </div>
        </ButtonGroup>
        <ReactAce
          cursorStart={1}
          debounceChangePeriod={100}
          editorProps={
            Object {
              "$blockScrolling": true,
            }
          }
          enableBasicAutocompletion={false}
          enableLiveAutocompletion={false}
          focus={false}
          fontSize={12}
          height="calc(100vh - 36px - 0px)"
          highlightActiveLine={true}
          isEditingInitially={true}
          maxLines={null}
          minLines={null}
          mode=""
          name="editor-test.js"
          onChange={[Function]}
          onLoad={null}
          onPaste={null}
          onScroll={null}
          readOnly={true}
          scrollMargin={
            Array [
              0,
              0,
              0,
              0,
            ]
          }
          setOptions={
            Object {
              "cursorStyle": "smooth",
            }
          }
          showGutter={true}
          showPrintMargin={true}
          style={Object {}}
          tabSize={2}
          theme="github"
          value=""
          width="100%"
          wrapEnabled={false}
        >
          <div
            id="editor-test.js"
            style={
              Object {
                "height": "calc(100vh - 36px - 0px)",
                "width": "100%",
              }
            }
          />
        </ReactAce>
      </div>
    </PureEditor>
  </withStateHandlers(PureEditor)>
</defaultProps(withStateHandlers(PureEditor))>
`;

exports[`Editor Reading Mode matches the snapshot 1`] = `
<defaultProps(withStateHandlers(PureEditor))
  filename="test.js"
  isEditingInitially={false}
  isEditingPermitted={true}
  reservedHeaderHeight={0}
  value="This is the test content"
>
  <withStateHandlers(PureEditor)
    filename="test.js"
    isEditingInitially={false}
    isEditingPermitted={true}
    reservedHeaderHeight={0}
    value="This is the test content"
  >
    <PureEditor
      closeRevertChangesModal={[Function]}
      cursorPosition={
        Object {
          "column": 0,
          "row": 0,
        }
      }
      cursorPositionWasSet={true}
      filename="test.js"
      isEditing={false}
      isEditingInitially={false}
      isEditingPermitted={true}
      keepCursorAt={[Function]}
      onChangeValueUpdater={[Function]}
      openRevertChangesModal={[Function]}
      reservedHeaderHeight={0}
      resetValue={[Function]}
      revertChangesModalIsOpen={false}
      setInitialCursorPosition={[Function]}
      toggleEditingMode={[Function]}
      value=""
    >
      <div>
        <ButtonGroup
          attached="top"
        >
          <div
            className="ui top attached buttons"
          >
            <Button
              as="button"
              color="blue"
              content="Reading Mode"
              icon="eye"
              onClick={[Function]}
            >
              <button
                className="ui blue button"
                onClick={[Function]}
                role="button"
              >
                <Icon
                  as="i"
                  key="eye"
                  name="eye"
                >
                  <i
                    aria-hidden="true"
                    className="eye icon"
                  />
                </Icon>
                Reading Mode
              </button>
            </Button>
          </div>
        </ButtonGroup>
        <ReactAce
          cursorStart={1}
          debounceChangePeriod={100}
          editorProps={
            Object {
              "$blockScrolling": true,
            }
          }
          enableBasicAutocompletion={false}
          enableLiveAutocompletion={false}
          focus={false}
          fontSize={12}
          height="calc(100vh - 36px - 0px)"
          highlightActiveLine={true}
          isEditingInitially={false}
          maxLines={null}
          minLines={null}
          mode=""
          name="editor-test.js"
          onChange={[Function]}
          onLoad={null}
          onPaste={null}
          onScroll={null}
          readOnly={true}
          scrollMargin={
            Array [
              0,
              0,
              0,
              0,
            ]
          }
          setOptions={
            Object {
              "cursorStyle": "smooth",
            }
          }
          showGutter={true}
          showPrintMargin={true}
          style={Object {}}
          tabSize={2}
          theme="github"
          value=""
          width="100%"
          wrapEnabled={false}
        >
          <div
            id="editor-test.js"
            style={
              Object {
                "height": "calc(100vh - 36px - 0px)",
                "width": "100%",
              }
            }
          />
        </ReactAce>
      </div>
    </PureEditor>
  </withStateHandlers(PureEditor)>
</defaultProps(withStateHandlers(PureEditor))>
`;

exports[`Editor Reading Mode matches the snapshot after clicking the toggle 1`] = `
<defaultProps(withStateHandlers(PureEditor))
  filename="test.js"
  isEditingInitially={false}
  isEditingPermitted={true}
  reservedHeaderHeight={0}
  value="This is the test content"
>
  <withStateHandlers(PureEditor)
    filename="test.js"
    isEditingInitially={false}
    isEditingPermitted={true}
    reservedHeaderHeight={0}
    value="This is the test content"
  >
    <PureEditor
      closeRevertChangesModal={[Function]}
      cursorPosition={
        Object {
          "column": 0,
          "row": 0,
        }
      }
      cursorPositionWasSet={true}
      filename="test.js"
      isEditing={true}
      isEditingInitially={false}
      isEditingPermitted={true}
      keepCursorAt={[Function]}
      onChangeValueUpdater={[Function]}
      openRevertChangesModal={[Function]}
      reservedHeaderHeight={0}
      resetValue={[Function]}
      revertChangesModalIsOpen={false}
      setInitialCursorPosition={[Function]}
      toggleEditingMode={[Function]}
      value=""
    >
      <div>
        <ButtonGroup
          attached="top"
        >
          <div
            className="ui top attached buttons"
          >
            <Button
              as="button"
              color="green"
              content="Editing Mode"
              icon="edit"
              onClick={[Function]}
            >
              <button
                className="ui green button"
                onClick={[Function]}
                role="button"
              >
                <Icon
                  as="i"
                  key="edit"
                  name="edit"
                >
                  <i
                    aria-hidden="true"
                    className="edit icon"
                  />
                </Icon>
                Editing Mode
              </button>
            </Button>
            <Modal
              basic={true}
              closeOnDimmerClick={true}
              closeOnDocumentClick={false}
              dimmer={true}
              eventPool="Modal"
              open={false}
              size="small"
              trigger={
                <Button
                  as="button"
                  color="red"
                  content="Discard Changes"
                  data-testid="reset-button"
                  icon="trash outline"
                  onClick={[Function]}
                />
              }
            >
              <Portal
                className="ui page modals dimmer transition visible active"
                closeOnDocumentClick={false}
                closeOnEscape={true}
                closeOnRootNodeClick={true}
                eventPool="Modal"
                mountNode={<body />}
                onClose={[Function]}
                onMount={[Function]}
                onOpen={[Function]}
                onUnmount={[Function]}
                open={false}
                openOnTriggerClick={true}
                trigger={
                  <Button
                    as="button"
                    color="red"
                    content="Discard Changes"
                    data-testid="reset-button"
                    icon="trash outline"
                    onClick={[Function]}
                  />
                }
              >
                <Ref
                  innerRef={[Function]}
                >
                  <Button
                    as="button"
                    color="red"
                    content="Discard Changes"
                    data-testid="reset-button"
                    icon="trash outline"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onFocus={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <button
                      className="ui red button"
                      data-testid="reset-button"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      role="button"
                    >
                      <Icon
                        as="i"
                        key="trash outline"
                        name="trash outline"
                      >
                        <i
                          aria-hidden="true"
                          className="trash outline icon"
                        />
                      </Icon>
                      Discard Changes
                    </button>
                  </Button>
                </Ref>
              </Portal>
            </Modal>
          </div>
        </ButtonGroup>
        <ReactAce
          cursorStart={1}
          debounceChangePeriod={100}
          editorProps={
            Object {
              "$blockScrolling": true,
            }
          }
          enableBasicAutocompletion={false}
          enableLiveAutocompletion={false}
          focus={false}
          fontSize={12}
          height="calc(100vh - 36px - 0px)"
          highlightActiveLine={true}
          isEditingInitially={false}
          maxLines={null}
          minLines={null}
          mode=""
          name="editor-test.js"
          onChange={[Function]}
          onLoad={null}
          onPaste={null}
          onScroll={null}
          readOnly={false}
          scrollMargin={
            Array [
              0,
              0,
              0,
              0,
            ]
          }
          setOptions={
            Object {
              "cursorStyle": "smooth",
            }
          }
          showGutter={true}
          showPrintMargin={true}
          style={Object {}}
          tabSize={2}
          theme="github"
          value=""
          width="100%"
          wrapEnabled={false}
        >
          <div
            id="editor-test.js"
            style={
              Object {
                "height": "calc(100vh - 36px - 0px)",
                "width": "100%",
              }
            }
          />
        </ReactAce>
      </div>
    </PureEditor>
  </withStateHandlers(PureEditor)>
</defaultProps(withStateHandlers(PureEditor))>
`;
